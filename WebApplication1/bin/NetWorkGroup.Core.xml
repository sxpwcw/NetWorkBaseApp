<?xml version="1.0"?>
<doc>
    <assembly>
        <name>NetWorkGroup.Core</name>
    </assembly>
    <members>
        <member name="T:NetWorkGroup.Abstraction.AbstractBase`1">
            <summary>
            抽象基类，为实现层提供基础抽象服务
            <para>包含查询、根据主键查询、根据外键查询等</para>
            </summary>
            <typeparam name="TModel">模型层,约束为：<para>必须为引用类型</para><para>并且具有无参数的构造函数</para><para>并且实现IModel接口</para></typeparam>
        </member>
        <member name="T:System.CoreBase">
            <summary>
            核心程序基类，提供基础服务
            </summary>
        </member>
        <member name="F:System.CoreBase.OnLineUser">
            <summary>
            表示一个全局字符串变量，用于保存在线的用户信息
            </summary>
        </member>
        <member name="M:System.CoreBase.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:System.CoreBase.SetReturnValue``1(``0)">
            <summary>
            设置返回值
            </summary>
            <typeparam name="T">任意类型数据</typeparam>
            <param name="obj">返回值数据值</param>
        </member>
        <member name="M:System.CoreBase.Dispose">
            <summary>
            释放已经使用的程序资源以释放内存
            </summary>
        </member>
        <member name="P:System.CoreBase.WebContext">
            <summary>
            获取一个值，该值表示当前的Web应用程序上下文
            </summary>
        </member>
        <member name="P:System.CoreBase.Session">
            <summary>
            获取一个值，该值表示当前Http相应的HttpSessionState对象
            </summary>
        </member>
        <member name="P:System.CoreBase.Server">
            <summary>
            获取一个值，该值表示当前Http相应的HttpServerUtility对象
            </summary>
        </member>
        <member name="P:System.CoreBase.Response">
            <summary>
            获取一个值，该值表示当前Http相应的HttpResponse对象
            </summary>
        </member>
        <member name="P:System.CoreBase.Request">
            <summary>
            获取一个值，该值表示当前Http相应的HttpRequest对象
            </summary>
        </member>
        <member name="P:System.CoreBase.Application">
            <summary>
            获取一个值，该值表示当前Http相应的HttpApplicationState对象
            </summary>
        </member>
        <member name="P:System.CoreBase.Result">
            <summary>
            表示数据库执行完成之后向前台输出的键值对返回值。
            </summary>
        </member>
        <member name="M:NetWorkGroup.Abstraction.AbstractBase`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:NetWorkGroup.Abstraction.AbstractBase`1.#ctor(NetWorkGroup.Data.DbConnectionString)">
            <summary>
            构造函数重载
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="F:NetWorkGroup.Abstraction.AbstractBase`1._dbContext">
            <summary>
            内部成员，表示LINQ TO SQL支持点的属性使用
            </summary>
        </member>
        <member name="M:NetWorkGroup.Abstraction.AbstractBase`1.Show">
            <summary>
            显示数据，抽象方法
            </summary>
        </member>
        <member name="M:NetWorkGroup.Abstraction.AbstractBase`1.Show(System.Linq.Expressions.Expression{System.Func{`0,System.Boolean}})">
            <summary>
            显示数据，抽象方法
            </summary>
        </member>
        <member name="P:NetWorkGroup.Abstraction.AbstractBase`1.DbContext">
            <summary>
            获取或者设置一个值，该值表示数据上下文，此属性为LINQ TO SQL提供支持
            </summary>
        </member>
        <member name="P:NetWorkGroup.Abstraction.AbstractBase`1.ConnectionString">
            <summary>
            获取或者设置一个值，该值表示数据库连接字符串
            </summary>
        </member>
        <member name="P:NetWorkGroup.Abstraction.AbstractBase`1.DataBase">
            <summary>
            获取或者设置一个值，该值表示数据库层类型，根据配置文件返回一个特定的数据库处理类的实例
            </summary>
        </member>
        <member name="T:NetWorkGroup.Core.Abstraction.MultiAbstract`1">
            <summary>
            抽象基类扩展
            <para>包含增加、删除、修改等</para>
            </summary>
            <typeparam name="TModel">模型层,约束为：<para>必须为引用类型</para><para>并且具有无参数的构造函数</para></typeparam>
        </member>
        <member name="M:NetWorkGroup.Core.Abstraction.MultiAbstract`1.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="M:NetWorkGroup.Core.Abstraction.MultiAbstract`1.#ctor(NetWorkGroup.Data.DbConnectionString)">
            <summary>
            构造函数重载
            </summary>
            <param name="ConnectionString">数据库连接字符串</param>
        </member>
        <member name="M:NetWorkGroup.Core.Abstraction.MultiAbstract`1.Append(System.String)">
            <summary>
            增加一条数据，抽象方法
            </summary>
        </member>
        <member name="M:NetWorkGroup.Core.Abstraction.MultiAbstract`1.Delete(System.String)">
            <summary>
            删除一条数据，抽象方法
            </summary>
        </member>
        <member name="M:NetWorkGroup.Core.Abstraction.MultiAbstract`1.Update(System.String)">
            <summary>
            更新一条数据，抽象方法
            </summary>
        </member>
        <member name="T:System.ConstBase">
            <summary>
            静态公用类，包含制度字串和全局字串
            </summary>
        </member>
        <member name="F:System.ConstBase.OnLineUser">
            <summary>
            表示一个全局字符串变量，用于保存在线的用户信息
            </summary>
        </member>
        <member name="M:System.ConstBase.#ctor">
            <summary>
            默认构造函数
            </summary>
        </member>
        <member name="T:System.ResultData">
            <summary>
            表示向前台返回的数据返回值到包装器
            </summary>
        </member>
        <member name="M:System.ResultData.#ctor(System.Func{System.Collections.Generic.Dictionary{System.String,System.Object}})">
            <summary>
            构造函数
            </summary>
            <param name="viewDataThunk">得到一个字典的返回值对象</param>
        </member>
        <member name="M:System.ResultData.GetDynamicMemberNames">
            <summary>
            迭代所有的KEY
            </summary>
            <returns></returns>
        </member>
        <member name="M:System.ResultData.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            尝试得到当前名称的值
            </summary>
            <param name="binder">动态的名称</param>
            <param name="result">返回值</param>
            <returns></returns>
        </member>
        <member name="M:System.ResultData.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            尝试设置值
            </summary>
            <param name="binder">动态的名称</param>
            <param name="value">需要设置的值</param>
            <returns></returns>
        </member>
        <member name="P:System.ResultData.Data">
            <summary>
            内部成员，用户指定保存数据的字典
            </summary>
        </member>
        <member name="P:System.ResultData.Count">
            <summary>
            获取一个值，该值表示当前动态对象包含的元素个数
            </summary>
        </member>
        <member name="P:System.ResultData.Item(System.Int32)">
            <summary>
            获取一个值，根据当前的索引
            </summary>
            <param name="Index">当前的索引</param>
            <returns>得到的值</returns>
        </member>
    </members>
</doc>
